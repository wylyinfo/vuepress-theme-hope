import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-cK-UKDIo.js";const e={},p=t(`<h1 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h1><p>研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题</p><p>逻辑结构：集合结构、线性结构、树形结构、图形结构</p><p>物理结构：顺序存储结构、链式存储结构</p><p>程序运行时间，依赖于算法好坏和问题输入规模（忽略因素：软件编译产生的代码质量，硬件机器执行指令的速度）</p><h5 id="线性结构" tabindex="-1"><a class="header-anchor" href="#线性结构" aria-hidden="true">#</a> 线性结构</h5><p>顺序存储：存取数据时间复杂度o(1)，插入删除时间复杂度o(n)，适合数据存取，需要预分配存储空间</p><p>链式存储：存取数据时间复杂度o(n)，插入删除时间复杂度o(1)，适合频繁插入删除</p><h5 id="栈与队列" tabindex="-1"><a class="header-anchor" href="#栈与队列" aria-hidden="true">#</a> 栈与队列</h5><h5 id="栈-限定仅在表尾进行插入和删除操作的线性结构" tabindex="-1"><a class="header-anchor" href="#栈-限定仅在表尾进行插入和删除操作的线性结构" aria-hidden="true">#</a> 栈：限定仅在表尾进行插入和删除操作的线性结构</h5><p>顺序栈：必须事先确定存储空间大小，存在内存空间浪费，时间复杂度o(1)</p><p>链栈：每个元素都有指针域，增加了内存开销，长度无限制，时间复杂度o(1)</p><h5 id="队列-只允许在一端进行插入操作-而在另一端进行删除操作的线性结构" tabindex="-1"><a class="header-anchor" href="#队列-只允许在一端进行插入操作-而在另一端进行删除操作的线性结构" aria-hidden="true">#</a> 队列：只允许在一端进行插入操作，而在另一端进行删除操作的线性结构</h5><p>循环顺序队列：时间复杂度o(1)，事先申请空间，使用期间不释放</p><p>链队列：时间复杂度o(1)，需要指针域，会产生空间开销</p><h5 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h5><p>平衡二叉树（AVL树）：二叉排序树，左右子树高度差至多等于1，查找、插入删除时间复杂度o(log(n))</p><p>多路查找树（B树）：子结点可以多于两个，每个结点可存储多个元素（降低磁盘IO）</p><p>B+树：所有叶子结点包含全部关键字及其指针，且顺序链接(适合范围查找)</p><p>红黑树：根结点为黑色，所有节点都是黑色或红色，所有叶子节点(Null)都是黑色，红色节点子节点一定是黑色，任一节点到叶子节点所有路径上黑色节点数量相同。AVL树是严格平衡二叉树，要求每个节点左右子树高度差不超过1，查找效率，平衡调整成本更高，适合频繁查找；红黑树要求任何一条路径长度不超过其他路径长度2倍，适合频繁插入删除。</p><h5 id="散列表-哈希表" tabindex="-1"><a class="header-anchor" href="#散列表-哈希表" aria-hidden="true">#</a> 散列表（哈希表）</h5><p>查找时间复杂度o(1)，影响因素：散列函数是否均匀，处理冲突的方法，散列表的装填因子</p><h5 id="跳跃表" tabindex="-1"><a class="header-anchor" href="#跳跃表" aria-hidden="true">#</a> 跳跃表</h5><p>底层基于链表实现，含有多层，每个节点的每层都有指向表尾方向最近一个节点的指针，查询原理类似二分查找，查找、插入删除时间复杂度o(log(n))，维持结构平衡成本比较低</p><h4 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> JAVA</h4><h5 id="arraylist-底层基于数组" tabindex="-1"><a class="header-anchor" href="#arraylist-底层基于数组" aria-hidden="true">#</a> ArrayList：底层基于数组</h5><p>类内部使用默认缺省时对象数组的容量大小，自动扩容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span><span class="token comment">//缓存数组，通常会预留容量</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// overflow-conscious code</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>
    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="linkedlist-循环双向链表" tabindex="-1"><a class="header-anchor" href="#linkedlist-循环双向链表" aria-hidden="true">#</a> LinkedList: 循环双向链表</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span><span class="token comment">//结点保存前驱和后继的引用</span>
<span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">E</span> item<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="hashmap-数组-链表-红黑树" tabindex="-1"><a class="header-anchor" href="#hashmap-数组-链表-红黑树" aria-hidden="true">#</a> HashMap：数组+链表+红黑树</h5><p>数组长度是2的n次幂（散列分布均匀）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素个数超过数组大小*loadFactor，会进行数组扩容（降低碰撞几率）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
                 oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>
        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>
        newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表与红黑树转换（Poisson distribution链表长度等于8的概率约为0.00000006，查找性能o(n) -&gt; o(log(n))，空间复杂度接近翻倍）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment">//转为树</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//转为链表</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token comment">//转为树，数组最小容量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>散列函数（hash取余计算综合高位低位，减少hash冲突）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//n表示长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="copyonwritearraylist-线程安全-可重入锁" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist-线程安全-可重入锁" aria-hidden="true">#</a> CopyOnWriteArrayList 线程安全(可重入锁)</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写时复制，内存占用大，适合写多读少的并发场景</span>
        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token comment">//只能保证数据最终一致性，不保证实时一致性；并发性比Vector好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="concurrenthashmap-线程安全-cas-synchronized" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-线程安全-cas-synchronized" aria-hidden="true">#</a> ConcurrentHashMap 线程安全(CAS + synchronized)</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Unsafe</span> <span class="token class-name">U</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span>
<span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">SIZECTL</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">ABASE</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ASHIFT</span><span class="token punctuation">;</span>
<span class="token constant">SIZECTL</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span>objectFieldOffset
    <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;sizeCtl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">ABASE</span> <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">arrayBaseOffset</span><span class="token punctuation">(</span>ak<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> scale <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">arrayIndexScale</span><span class="token punctuation">(</span>ak<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>scale <span class="token operator">&amp;</span> <span class="token punctuation">(</span>scale <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;data type scale not a power of two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token constant">ASHIFT</span> <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化table</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                         <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>
            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//链表或红黑树添加节点，加锁</span>
				<span class="token comment">//...</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">tabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>
                                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//数组初始化或扩容</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//JVM会根据处理器类型，为汇编指令cmpxhg，比较并交换操作数，多处理器加上Lock前缀，单处理器则忽略（确保对内存读-改-写操作原子执行，禁止该指令与前后读写指令重排序，把写缓冲区中的所有数据刷新到内存）</span>
            <span class="token comment">//CAS缺点：存在ABA问题，采用版本号解决；循环时间长，开销大；只能保证一个共享变量</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MYSQL</h4><h5 id="索引实现" tabindex="-1"><a class="header-anchor" href="#索引实现" aria-hidden="true">#</a> 索引实现</h5><h5 id="b-tree索引-b-树" tabindex="-1"><a class="header-anchor" href="#b-tree索引-b-树" aria-hidden="true">#</a> B-Tree索引(B+树)</h5><p>叶子节点存放所有索引值，非叶子节点用于快速定位包含目标值的叶子节点；叶子节点的值有序；叶子节点之间以链表关联</p><p>InnoDb：如使用聚簇索引（索引和行数据在一起存储，一种数据存储组织方式，通过主键实现，如果没有主键会选择唯一非空索引，如果还是没有，隐式生成一个主键），则叶子节点包含行数据，直接返回；如果使用非聚簇索引（普通索引），则根据叶子节点的主键查询聚簇索引，最后返回数据。</p><p>MyISAM: 叶子节点除索引值只存储指向行数据的指针，根据该指针从表文件查询数据</p><p>支持范围查找，支持排序，分组，支持前缀匹配；占用空间较大</p><h5 id="hash索引-哈希表" tabindex="-1"><a class="header-anchor" href="#hash索引-哈希表" aria-hidden="true">#</a> Hash索引(哈希表)</h5><p>查找速度最快o(1)；不支持范围查找，需要处理hash冲突，必须全值精确匹配</p><p>ibdata：innoDB表元数据（表，列，索引，索引列），undo log, change buffer, doublewrite buffer。启用innodb_file_per_table选项，新创建表的数和索引将存储在单独的.ibd文件(show GLOBAL VARIABLES like &#39;%innodb_file%&#39;)</p><p>ib_logfile: 事务日志/redo日志，采用顺序循环写入，每开启一个事务，会记录对数据文件修改的物理位置或偏移量。文件个数由innodb_log_files_in_group控制(show GLOBAL VARIABLES like &#39;%innodb_log%&#39;)。记录所有innodb表数据变化，正在执行的dml及ddl语句，系统崩溃数据恢复</p><h5 id="事务实现-redo-undo-log-锁-mvcc" tabindex="-1"><a class="header-anchor" href="#事务实现-redo-undo-log-锁-mvcc" aria-hidden="true">#</a> 事务实现（redo&amp;undo log, 锁, MVCC）</h5><h5 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo log</h5><p>redo log buffer &amp; redo log，分别在内存和磁盘，用于恢复数据，保障MySQL宕机时已提交事务的持久化(mysql修改会先存到Buffer Pool(缓冲池，包含磁盘数据页的映射)，读数据会先从缓冲池读取，如果缓冲池没有，则从磁盘读取再放入缓冲池；写数据会先写入缓冲池，然后用后台线程定期同步缓冲池到磁盘)</p><p>redo log顺序存储，缓存同步随机操作；缓存同步是以数据页为单位，每次传输数据大小大于redo log</p><h5 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log" aria-hidden="true">#</a> undo log</h5><p>记录事务修改之前版本的数据信息，用于回滚数据，保障未提交事务的原子性。数据变更操作都生成一条undo log，并且回滚日志必须先于数据持久化到磁盘，事务回滚就是根据回滚日志做逆向操作</p><h5 id="读写锁-shared-lock-exclusive-lock" tabindex="-1"><a class="header-anchor" href="#读写锁-shared-lock-exclusive-lock" aria-hidden="true">#</a> 读写锁（shared lock / exclusive lock）</h5><p>InnoDB行锁：共享锁（允许事务读一行，阻止其他事务获得相同数据集的排他锁, select * from table_name where ... lock in share mode），排他锁（允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的读写锁, select * from table_name where ... for update），如果没有及时commit/rollback，可能会造成其他事务长时间等待，影响并发效率</p><p>行锁实现方式：通过给索引上的索引项加锁实现，只有通过索引条件检索数据，才使用行锁，否则将使用表锁</p><p>意向锁（intention locks，表锁，为了允许行锁和表锁共存），意向共享锁(IS)，意向排他锁(IX)，事务打算给数据行加共享/排他锁，在加锁前必须先取得该表的意向锁</p><p>间隙锁（范围检索数据时，请求共享或排他锁时，会给符合条件的已有数据记录索引项加锁，范围内不存在的记录也会加锁），阻塞范围键值并发插入，造成锁等待</p><h5 id="mvcc-multiversion-concurrency-control-多版本并发控制" tabindex="-1"><a class="header-anchor" href="#mvcc-multiversion-concurrency-control-多版本并发控制" aria-hidden="true">#</a> MVCC（MultiVersion Concurrency Control) 多版本并发控制</h5><p>通过每行记录后面保存两个隐藏列实现（保存行的创建时间，过期时间，实际存储系统版本号，每开启一个新事务，系统版本号会自动递增，用于和查询到的每行记录版本号比较），通过数据多版本实现不加锁读进而做到读写并行。实现依赖：undo log记录某行数据多个版本数据，read view判断当前版本数据的可见性（https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html）</p><p>READ UNCOMMITTED: 读写并行，性能高；造成脏读，未提交事务的数据也会被读取到</p><p>READ COMMITTED: 写锁，读不加锁；造成不可重复读（事务中会读取到其他事务新提交的数据，造成多次读取结果不一样），幻读</p><p>REPEATABLE READ:</p><p>写锁，读不加锁采用MVCC，读写并行</p><p>select: 只查找版本小于等于当前事务版本的数据行，确保在事务开始前已经存在或事务自身插入或修改; 行删除版本未定义或大于当前事务版本号，确保事务读取到的行，在事务开始之前未被删除</p><p>insert: 为新插入行保存当前系统版本号作为行版本号</p><p>delete: 为删除行保存当前系统版本号作为行删除标识</p><p>update: 插入一行新记录保存当前系统版本号作为行版本号，同时保存为原来行作为行删除标识</p><p>会产生幻读（如果事务中有其他新事务提交的新插入行，查询记录是否存在，不存在，准备插入该记录，但是执行发现此记录已存在，无法插入）</p><p>SERIALIZABLE: 加锁读，读写串行，性能低</p><h4 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h4><h5 id="redisobject-结构" tabindex="-1"><a class="header-anchor" href="#redisobject-结构" aria-hidden="true">#</a> redisObject 结构</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类型(string,list,hash,set,zset)</span>
    <span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// 编码(通过OBJECT ENCODING key查看, int:long类型整数，embstr:embstr编码的简单动态字符串，raw:简单动态字符串，hashtable:字典，linkedlist:双端链表，ziplist:压缩列表，intset:整数集合，skiplist：跳跃表和字典)</span>
    <span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// 指向底层实现数据结构的指针</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> robj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="简单动态字符串-simple-dynamic-string-sds" tabindex="-1"><a class="header-anchor" href="#简单动态字符串-simple-dynamic-string-sds" aria-hidden="true">#</a> 简单动态字符串(simple dynamic string, SDS)</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//简单动态字符串(simple dynamic string, SDS)</span>
<span class="token comment">//获取字符串长度复杂度o(1); 修改字符串时，会检查内存空间再进行字符串修改，杜绝缓冲区溢出；采用空间预分配和惰性释放空间</span>
<span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">{</span>
    <span class="token comment">// buf 中已占用空间的长度</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token comment">// buf 中剩余可用空间的长度</span>
    <span class="token keyword">int</span> free<span class="token punctuation">;</span>
    <span class="token comment">// 数据空间，以&#39;\\0&#39;作为结束标识符</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//字符串对象：int编码，保存整数值；raw编码，字符串保存大于32字节字符串，内存分配次数两次；embstr编码，字符串保存小于等于32字节字符串，内存分配只需一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="压缩列表-ziplist" tabindex="-1"><a class="header-anchor" href="#压缩列表-ziplist" aria-hidden="true">#</a> 压缩列表(ziplist)</h5><p>一系列特殊编码的连续内存块组成的顺序存储结构，不同于数组，为节省内存每个元素所占内存大小可以不同。内存占用少，容易加载到CPU缓存，结构紧凑，减少内存碎片，平均时间复杂度o(n)；连锁更新</p><p>zlbytes: ziplist的长度（单位: 字节)，是一个32位无符号整数</p><p>zltail: ziplist最后一个节点的偏移量，反向遍历ziplist或者pop尾部节点的时候有用。</p><p>zllen: ziplist的节点（entry）个数</p><p>entry: 节点(prevlengh: 记录上一个节点的长度，为了方便反向遍历ziplist; encoding: 当前节点的编码规则; data: 当前节点的值，可以是数字或字符串)</p><p>zlend: 值为0xFF，用于标记ziplist的结尾</p><h5 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>
    <span class="token comment">// 表头节点</span>
    listNode <span class="token operator">*</span> head<span class="token punctuation">;</span>
    <span class="token comment">// 表尾节点</span>
    listNode <span class="token operator">*</span> tail<span class="token punctuation">;</span>
    <span class="token comment">// 链表所包含的节点数量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>
    <span class="token comment">// 节点值复制函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点值释放函数</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 节点值对比函数</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> list<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 前置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> prev<span class="token punctuation">;</span>
    <span class="token comment">// 后置节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token comment">// 节点的值</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>listNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//dict.h</span>
<span class="token comment">//字典 或称符号表symbol table, 关联数组associative array, 映射map</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类型特定函数</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span>
    <span class="token comment">// 私有数据</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>
    <span class="token comment">// 哈希表，rehash操作，为ht[1]分配空间，重新计算ht[0]哈希值，放到ht[1]，迁移完成后，将ht[1]设置为ht[0]，释放ht[0]，并创建空白ht[1],为下次rehash做准备</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// rehash索引，分多次渐进式rehash，完成后rehashidx增加1，迁移完成rehashidx设为-1，标识rehash完成。期间，查找先找ht[0]，再找ht[1]；添加操作一律添加到ht[1]</span>
    <span class="token keyword">int</span> rehashidx<span class="token punctuation">;</span> <span class="token comment">/* rehashing not in progress if rehashidx == -1 */</span>
    <span class="token keyword">int</span> iterators<span class="token punctuation">;</span> <span class="token comment">/* number of iterators currently running */</span>
<span class="token punctuation">}</span> dict<span class="token punctuation">;</span>
<span class="token comment">//字典内部hashtable</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">{</span>
    <span class="token comment">// 哈希表数组</span>
    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>
    <span class="token comment">// 哈希表大小</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>
    <span class="token comment">// 哈希表大小掩码，用于计算索引值，size-1</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>
    <span class="token comment">// 已有节点数量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictht<span class="token punctuation">;</span>
<span class="token comment">//hashtable节点</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span>
    <span class="token comment">// key</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token comment">// 值</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
        <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span>
        <span class="token class-name">int64_t</span> s64<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>
    <span class="token comment">// 指向下个哈希表节点，形成链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="跳跃表-1" tabindex="-1"><a class="header-anchor" href="#跳跃表-1" aria-hidden="true">#</a> 跳跃表</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//每个节点有多个指向其他节点的指针，从而快速访问节点</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span>
    <span class="token comment">// 表头节点和表尾节点</span>
    structz skiplistNode <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token comment">// 表中节点的数量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>
    <span class="token comment">// 表中层数最大的节点的层数</span>
    <span class="token keyword">int</span> level<span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 层</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span>
        <span class="token comment">// 前进指针</span>
        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>
        <span class="token comment">// 跨度</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 后退指针</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>
    <span class="token comment">// 分值</span>
    <span class="token keyword">double</span> score<span class="token punctuation">;</span>
    <span class="token comment">// 成员对象</span>
    robj <span class="token operator">*</span>obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="整数集合" tabindex="-1"><a class="header-anchor" href="#整数集合" aria-hidden="true">#</a> 整数集合</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//当集合只包含整数元素，并且元素个数不多时，作为集合键的底层实现，可以保存int16_t,int32_t,int64_t整数值，不会出现重复元素</span>
<span class="token comment">//升级操作：原来保存的是小类型(如int16_t)的整数，当插入比其类型大(如int64_t)的整数，会把集合里的元素数据类型转换成大的类型，节约内存，但不支持降级操作</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">{</span>
    <span class="token comment">// 编码方式</span>
    <span class="token class-name">uint32_t</span> encoding<span class="token punctuation">;</span>
    <span class="token comment">// 集合包含的元素数量</span>
    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span>
    <span class="token comment">// 保存元素的数组</span>
    <span class="token class-name">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> intset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="列表对象" tabindex="-1"><a class="header-anchor" href="#列表对象" aria-hidden="true">#</a> 列表对象</h5><p>ziplist编码：每个节点保存一个列表元素。满足所有字符串长度都小于64字节，元素数量小于512</p><p>linkedlist编码：每个节点都保存一个字符串对象，每个字符串对象保存一个列表元素</p><h5 id="哈希对象" tabindex="-1"><a class="header-anchor" href="#哈希对象" aria-hidden="true">#</a> 哈希对象</h5><p>ziplist编码：key-value键值对以紧密相连的方式放入，总是向表尾添加。满足所有键值字符串长度都小于64字节，键值对数量小于512个</p><p>hashtable编码：字典实现，字典的键值都是字符串对象，字典的键保存key，字典值保存value</p><h5 id="集合对象" tabindex="-1"><a class="header-anchor" href="#集合对象" aria-hidden="true">#</a> 集合对象</h5><p>intset编码：所有元素都保存在整数集合。满足所有元素都是整数值，元素个数小于等于512个</p><p>hashtable编码：字典每个键都是字符串对象，保存集合元素，字典值都是NULL</p><h5 id="有序集合对象" tabindex="-1"><a class="header-anchor" href="#有序集合对象" aria-hidden="true">#</a> 有序集合对象</h5><p>ziplist编码：类似哈希对象，两个紧密相连的压缩列表节点，第一个保存元素的成员，第二个保存元素的分值，分值小的靠近表头，大的靠近表尾。满足所有元素小于64字节，元素个数小于128个</p><p>skiplist编码：同时使用跳跃表和字典，跳跃表节点保存集合元素，按分值从小到大排列，节点object属性保存元素成员，score属性保存分值；字典每个键值对保存集合元素，字典键保存元素成员，字典值保存分值。跳跃表有序，但查询分值复杂度o(logn)，字典查询分值复杂度o(1)，但是无序；采用两种结构但是集合元素成员和分值是共享的，通过指针指向同一地址</p><h4 id="elasticsearch" tabindex="-1"><a class="header-anchor" href="#elasticsearch" aria-hidden="true">#</a> ElasticSearch</h4><h5 id="索引结构" tabindex="-1"><a class="header-anchor" href="#索引结构" aria-hidden="true">#</a> 索引结构</h5><p>分布式可扩展：用户查询在index上完成，index由shard组成。shard是数据存储的最小单元，对应lucene的library。</p><p>Elasticsearch为每个field建立倒排索引term，对应符合的文档id存储在Posting List（要求有序）。将磁盘里的东西尽量搬进内存，减少磁盘随机读取次数，压缩内存使用空间</p><p>通过term的前缀与Term Dictionary的block之间的映射关系，结合FST(有穷状态转换器，Finite State Transducers，空间占用小，此单单词重复利用，压缩存储空间，查询速度快o(len(str)))压缩，将term index缓存到内存，从term index查到对应term dictionary的block位置，再在磁盘上找term，减少磁盘随机读次数</p><p>Posting list压缩（Frame Of Reference，增量编码压缩，将大数变小数，仅存储增量值，按bit排队（头部存储Bits per value: 1 byte，具体按实际所需bits大小存储），最后按字节存储）</p><p>Roaring bitmaps，将posting list按照65535（2^16-1，2个字节表示最大数，short存储单位）为界限分块，以&lt;商，余数&gt;组合表示每一组id，如果块包含大于4096的值，采用bit set，否则用2个字节的数组</p><p>联合索引：跳跃表（对最短posting list的每个id，在另外的posting list中查找是否存在，最后得到交集的结果）；bitset（直接按位与，得到的结果就是最后的交集）</p><h5 id="lucene内部结构" tabindex="-1"><a class="header-anchor" href="#lucene内部结构" aria-hidden="true">#</a> lucene内部结构</h5><p>lucene内部数据由segment组成，写入的数据先写在内存中，经过refresh间隔将该时段的全部数据refresh成一个segment，然后merge成更大的segment。查询时会遍历每个segment，由于在内存中完成写入效率高，但存在丢失数据的风险，Elasticsearch实现了translog，防止数据丢失</p><p>doc: lucene中一条记录</p><p>field: 记录中的字段概念</p><p>term: 索引最小单位，如果field对应内容是全文检索类型，会进行分词，结果由term组成。不分词，字段内容是一个term</p><p>倒排索引(inverted index): 实现term到doc list的映射</p><p>正排数据：原始数据(doc list)</p><p>docvalues: 列式存储的名称，用作分析和排序</p><h5 id="lucene文件内容" tabindex="-1"><a class="header-anchor" href="#lucene文件内容" aria-hidden="true">#</a> lucene文件内容</h5><p>由很多segment文件组成，每个segment包含如下文件</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Extension</th><th style="text-align:left;">Brief Description</th></tr></thead><tbody><tr><td style="text-align:left;">Segment Info</td><td style="text-align:left;">.si</td><td style="text-align:left;">segment的元数据文件，记录segment文档数量，对应文件列表</td></tr><tr><td style="text-align:left;">Compound File</td><td style="text-align:left;">.cfs, .cfe</td><td style="text-align:left;">一个segment包含了如下表的各个文件，为减少打开文件的数量，在segment小的时候，segment的所有文件内容都保存在cfs文件中，cfe文件保存了lucene各文件在cfs文件的位置信息</td></tr><tr><td style="text-align:left;">Fields</td><td style="text-align:left;">.fnm</td><td style="text-align:left;">保存了fields的相关信息，包括field数量，类型，是否存储，索引，分词，列存</td></tr><tr><td style="text-align:left;">Field Index</td><td style="text-align:left;">.fdx</td><td style="text-align:left;">正排存储文件的元数据信息</td></tr><tr><td style="text-align:left;">Field Data</td><td style="text-align:left;">.fdt</td><td style="text-align:left;">存储了正排存储数据，写入的原文存储在这</td></tr><tr><td style="text-align:left;">Term Dictionary</td><td style="text-align:left;">.tim</td><td style="text-align:left;">倒排索引的元数据信息</td></tr><tr><td style="text-align:left;">Term Index</td><td style="text-align:left;">.tip</td><td style="text-align:left;">倒排索引文件，存储了所有的倒排索引数据，倒排索引实现为FST tree，内存空间占用低</td></tr><tr><td style="text-align:left;">Frequencies</td><td style="text-align:left;">.doc</td><td style="text-align:left;">保存了每个term的doc id列表和term在doc中的词频</td></tr><tr><td style="text-align:left;">Positions</td><td style="text-align:left;">.pos</td><td style="text-align:left;">Stores position information about where a term occurs in the index 全文索引的字段，会有该文件，保存了term在doc中的位置</td></tr><tr><td style="text-align:left;">Payloads</td><td style="text-align:left;">.pay</td><td style="text-align:left;">Stores additional per-position metadata information such as character offsets and user payloads 全文索引的字段，使用了一些像payloads的高级特性会有该文件，保存了term在doc中的一些高级特性</td></tr><tr><td style="text-align:left;">Norms</td><td style="text-align:left;">.nvd, .nvm</td><td style="text-align:left;">文件保存索引字段加权数据</td></tr><tr><td style="text-align:left;">Per-Document Values</td><td style="text-align:left;">.dvd, .dvm</td><td style="text-align:left;">lucene的docvalues文件，即数据的列式存储，用作聚合和排序</td></tr><tr><td style="text-align:left;">Term Vector Data</td><td style="text-align:left;">.tvx, .tvd, .tvf</td><td style="text-align:left;">Stores offset into the document data file 保存索引字段的矢量信息，用在对term进行高亮，计算文本相关性中使用</td></tr><tr><td style="text-align:left;">Live Documents</td><td style="text-align:left;">.liv</td><td style="text-align:left;">记录了segment中删除的doc</td></tr></tbody></table><h5 id="读写数据原理" tabindex="-1"><a class="header-anchor" href="#读写数据原理" aria-hidden="true">#</a> 读写数据原理</h5><p>写入数据：客户端发送请求，通过coordinating node(协调节点)对document进行路由，将请求转发给对应的node处理，然后同步到replica node，如果发现primary node和所有replica node处理完成后返回后请求到客户端</p><p>写入数据底层原理(refresh, flush, translog, merge)</p><ol><li>先写入buffer(buffer里面数据搜索不到）同时写入translog日志文件；</li><li>buffer快满，或一段时间后，将buffer数据refresh到新的OS cache中，每秒将OS cache数据写入segment file。如果每秒没有新数据到buffer，会创建新的空segment file，只要buffer中数据被refresh到OS cache中，数据就可以被搜索到。只要数据输入到OS cache中，buffer内容就清空。同时数据到shard后，会写入translog，每隔5秒将translog中的数据持久化到磁盘</li><li>当translog文件变大到一定程度，会触发commit操作，将一个commit point写入到磁盘文件，标识对应的所有segment file，将OS cache中数据fsync到磁盘（在commit前，所有数据都在buffer或OS cache中，一旦宕机则数据丢失，重启会读取translog日志文件数据恢复）。将translog文件清空，重新启动一个translog，默认每隔30分钟commit。整个commit过程叫做一个flush操作</li><li>删除操作，commit时会产生.del文件，将doc标记为delete状态</li><li>更新操作，将原来的doc标识为delete状态，重新写入</li><li>会产生很多segment file文件，将定期执行merge操作，将多个segment file合并为一个，同时将标记为delete文件删除，将新segment file写入磁盘，会写一个commit point，标识所有新的segment file</li></ol><p>读数据：客户端发送请求，通过coordinating node对document路由转发，在primary shard及所有replica中随机选择一个，让读请求负载均衡，接受请求的node，返回document给coordinate node，再返回给客户端</p><p>搜索数据：客户端发送请求，通过coordinating node将搜索请求转发给所有的shard对应的primary shard或replica shard，每个shard将搜索结果（唯一标识），返回给协调节点进行数据合并，排序，分页等操作，然后根据唯一标识去各节点拉取数据，最后返回给客户端</p><p>搜索底层原理</p><ol><li>将广播请求到搜索的每一个节点的分片拷贝，查询请求可被主分片或副分片处理，协调节点在之后请求轮询所有分片拷贝</li><li>每个分片将在本地构建优先级队列，若要求返回结果排序从from开始数量为size的结果集，每个节点都会产生from+size的结果集，然会把结果集中每个文档ID和排序所需信息返回给协调节点</li><li>协调节点将所有结果汇总，进行全局排序，确定实际需要的文档，向含有该文档的分片请求，然后返回给客户端</li></ol><h4 id="react-vue" tabindex="-1"><a class="header-anchor" href="#react-vue" aria-hidden="true">#</a> React / Vue</h4><p>虚拟DOM，就是用一个JS对象描述一个DOM节点。产生的原因以及最大用途：数据驱动视图，数据发生变化视图就要随之更新，更新视图时需要操作DOM，而操作真实DOM非常耗费性能，因为浏览器的标准把DOM设计得非常复杂，真正的DOM元素非常庞大。可以用JS模拟出一个DOM节点，当数据发生变化时，对比变化前后的虚拟DOM节点，通过DOM-Diff算法计算出需要更新的地方，然后更新需要更新的视图。传统diff算法复杂度o(n^3)</p><h5 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h5><p>将Virtual DOM树转换成actual DOM树的最少操作过程称为协调(Reconciliation)。V16版本前协调机制是Stack reconciler(修改期间，主线程被js占用，因此任何交互、布局、渲染都会停止)，diff算法策略（复杂度o(n)）</p><ol><li>web UI跨级移动操作非常少，可忽略不计(tree diff)</li><li>拥有相同类型的两个组件产生的DOM结构相似，反之则不尽相同(component diff, React基于组件开发)</li><li>对于同一层级的一组子节点，通过分配唯一id进行区分(Element diff)</li></ol><p>V16版本是Fiber reconciler(Fiber, 纤维，比线程控制得更精密的并发处理机制，将任务分片，划分优先级，同时能够实现类似操作系统中对线程抢占式调度，packages\\react-reconciler\\src ReactInternalTypes.js )，从依赖于内置堆栈的同步递归模型，变为具有链表和指针的异步模型，每个Element对应一个Fiber Node，成为Fiber Tree（层次遍历，diff策略建立在节点操作都在节点树同一层级中进行），记录当前页面状态，采用双缓存的策略(double buffering)，创建WorkInProgress Tree, 反映要刷新到屏幕的未来状态，构造完毕，将当前指针指向WorkInProgress Tree，丢弃旧Fiber Tree，复用内部对象(fiber)，节省内存分配和GC时间开销。</p><h5 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> Vue</h5><p>VNode类(src/core/vdom/vnode.js)可以实例出不同类型的虚拟DOM节点，视图渲染前，template模板先编译成VNode并缓存，数据变化后生成的VNode与前一次缓存的VNode比较，有差异的VNode对应的真实DOM节点重新渲染插入视图，完成一次视图更新</p><p>diff策略：只进行同层级比较，忽略跨级操作（src/core/vdom/patch.js）</p><h4 id="hbase" tabindex="-1"><a class="header-anchor" href="#hbase" aria-hidden="true">#</a> HBase</h4><p>基于列存储，数据持久化在HDFS（HDFS块block设置，如果过大，从磁盘传输数据时间会明显大于寻址时间，导致处理数据时较慢，如果过小，大量小文件会占用NameNode大量内存存储元数据，寻址时间增大，HDFS中凭据寻址时间大概为10ms，当寻址时间为传输时间的1%，为最佳状态，目前磁盘传输速率普遍为100MB/s，最佳block大小为100MB，设为128MB）。分布式数据库，使用zookeeper管理集群，分为Master和RegionServer</p><h4 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h4><h4 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka" aria-hidden="true">#</a> Kafka</h4><p>工作模式：启动zookeeper的server；启动kafka的server；producer生产数据，通过zookeeper找到broker(每个kafka实例称为broker)，再将数据push到Broker保存；customer通过zookeeper找到broker，再主动pull数据</p><p>Producer: 生产message到topic</p><p>Consumer: 订阅topic消费message，consumer作为一个线程消费，消费消息策略（roundrobin）</p><p>Consumer Group: 包含多个consumer，维护一个下标文件offset，记录当前组消费数据下标，消费一条，offset递增1。partition中每个message只能被一个组中的consumer消费，其他consumer不能消费同一topic中同一分区的数据，不同组consumer可以消费同一topic同一分区的数据</p><p>Broker：kafka节点(中间存储阵列)，多个broker组成kafka集群，负责持久化和备份具体kafka消息</p><p>Topic: 一类消息，消息存放的目录即主题（轮询：顺序分发，仅针对message没有key时；Hash分区：message有key时，key.hash%分区个数，增加分区时，partition里的message不会重分配，数据继续写入才会参与load balance）</p><p>Partition: 分区，topic物理上分组，每个partition是一个有序的队列，对应文件夹{topicname}{partition}{序号}，集群负载均衡基本单位，每条消息在partition中位置称为offset偏移量，类型为long型数字，消息被消费，不会立即删除，根据borker设置(基于时间存储或基于大小)，到期不管消息是否消费，都清除</p><p>Segment: partition物理上由多个segment组成，每个Segment存储多个message信息（默认1G，7天后删除），每个message由key-value和时间戳组成。包括index file（.index，元数据指向数据文件message物理偏移地址）和data file(.log)。第一个segment文件名从0开始，后续为上一个最后一条消息的offset，数字最大为64位long，19位数字字符长度，没有数字用0填充</p><p>Segment data file</p><table><thead><tr><th style="text-align:left;">8 byte offset</th><th>消息id(offset)</th></tr></thead><tbody><tr><td style="text-align:left;">4 byte message size</td><td>message大小</td></tr><tr><td style="text-align:left;">4 byte CRC32</td><td>用crc32校验message</td></tr><tr><td style="text-align:left;">1 byte magic</td><td>kafka服务程序协议版本号</td></tr><tr><td style="text-align:left;">1 byte attributes</td><td>独立版本、或标识压缩类型、或编码类型</td></tr><tr><td style="text-align:left;">4 byte key length</td><td>key的长度，key为-1时，K byte key字段不填</td></tr><tr><td style="text-align:left;">K byte key</td><td>可选</td></tr><tr><td style="text-align:left;">value bytes payload</td><td>实际消息数据</td></tr></tbody></table><p>查找message步骤：根据offset二分查找文件列表，定位文件，在.index文件中有两列（序列，地址），其中序列=查找message的偏移量-当前文件的起始偏移量，根据序列对应的地址，找到相应位置的message</p><p>zookeeper保存Consumer和Producer信息</p><h4 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h4><h4 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq" aria-hidden="true">#</a> RocketMQ</h4>`,163),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","大话数据结构.html.vue"]]);export{d as default};

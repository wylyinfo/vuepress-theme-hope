import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as p,f as r}from"./app-cK-UKDIo.js";const t={},d=r('<h1 id="延时队列" tabindex="-1"><a class="header-anchor" href="#延时队列" aria-hidden="true">#</a> 延时队列</h1><p>https://juejin.im/post/6844903648397525006</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>关注空闲连接。服务器中客户端连接，空闲一段时间后需要关闭</p><p>清理过期数据。如缓存对象超过空闲时间，需要从缓存中移除</p><p>任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求</p><p>订单超时取消。下单后三十分钟内没有付款自动取消订单</p><p>订餐通知。下单成功后60s后给用户发送短信通知</p><p>订单未支付退还库存。当订单一直处于未支付状态，如何及时关闭订单，并退还库存</p><p>定期检查退款状态。如何定期检查处于退款状态的订单是否已经退款成功</p><p>新创建店铺，N天内没有上传商品，系统如何知道该信息，并发送激活短信</p><p>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行</p><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h2><h3 id="定期轮询-数据库等" tabindex="-1"><a class="header-anchor" href="#定期轮询-数据库等" aria-hidden="true">#</a> 定期轮询（数据库等）</h3><p>定期轮询数据库，设置状态。</p><p>优点：实现简单</p><p>缺点：数据量过大时会消耗太多的IO资源，效率太低</p><h3 id="delayqueue" tabindex="-1"><a class="header-anchor" href="#delayqueue" aria-hidden="true">#</a> DelayQueue</h3><p>无界，延迟，阻塞队列</p><p>BlockingQueue+PriorityQueue（堆排序）+Delayed</p><p>DelayQueue中存放的对象需要实现compareTo()方法和getDelay()方法</p><p>getDelay方法返回该元素距离失效剩余时间，当&lt;=0时元素失效，就可以从队列中取到</p><h3 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer</h3><p>ScheduledExecutorService</p><p>时间轮(kafka)</p><p>RabbitMQ</p><p>Quartz</p><p>Redis Zset</p><p>Koala</p><p>JCronTab</p><p>SchedulerX(阿里)</p><p>有赞延迟队列</p>',32),h=[d];function i(c,n){return a(),p("div",null,h)}const s=e(t,[["render",i],["__file","延时队列.html.vue"]]);export{s as default};
